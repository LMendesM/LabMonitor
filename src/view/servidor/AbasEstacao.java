package view.servidor;

import controller.EstacaoJpaController;
import controller.InstrucaoJpaController;
import controller.ProcessoJpaController;
import java.util.List;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.persistence.EntityManagerFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.*;
import javax.swing.table.DefaultTableModel;
import model.Estacao;
import model.Instrucao;
import model.Processo;
import persistence.PersistenceSingleton;

public class AbasEstacao extends javax.swing.JPanel {

    TelaPrincipal telaPrincipal;
    String nome;

    EntityManagerFactory emf = PersistenceSingleton.getInstance().getEntityManagerFactory();
    EstacaoJpaController ejc = new EstacaoJpaController(emf);
    ProcessoJpaController pjc = new ProcessoJpaController(emf);

    Estacao estacao;

    public AbasEstacao(TelaPrincipal telaPrincipal, String nome) {
        initComponents();
        this.telaPrincipal = telaPrincipal;
        this.nome = nome;

        InstrucaoJpaController ijc = new InstrucaoJpaController(emf);

        estacao = ejc.findEstacao(nome);

        fieldNome.setText(estacao.getNome());
        fieldMac.setText(estacao.getMac());
        fieldIpv4.setText(estacao.getIpv4());
        fieldIpv6.setText(estacao.getIpv6());
        fieldNucleos.setText(String.valueOf(estacao.getNucleosCpu()));
        fieldMemoriaTotal.setText(String.valueOf(estacao.getMemoriaTotal() / 1000000) + " MB");
        fieldMemoriaDisponivel.setText(String.valueOf(estacao.getMemoriaDisponivel() / 1000000) + " MB");
        fieldLogin.setText(estacao.getUltimoLogin().toString());

        DefaultTableModel dtm = (DefaultTableModel) tableProcessos.getModel();

        Instrucao instrucao = new Instrucao();

        instrucao.setEstacao(estacao);
        instrucao.setComando("relatorio");
        ijc.create(instrucao);

        List<Processo> lista = pjc.findProcessoEntities();
        for (Processo processo : lista) {
            String pid = String.valueOf(processo.getPid());
            String cmd = processo.getCmd();
            String nome1 = estacao.getNome();
            String nome2 = processo.getEstacao().getNome();
            if ((nome1.equals(nome2)) && (processo.getStatus() == 1)) {
                dtm.addRow(new String[]{pid, cmd});
            }
        }
    }

    public void tiraPrint() throws Exception {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        Rectangle screenRect = new Rectangle(screenSize);
        Robot robot = new Robot();
        BufferedImage screenCapturedImage = robot.createScreenCapture(screenRect);

        ImageIO.write(screenCapturedImage, "png", new File("/home/alunos/printscreen.png"));
    }

    public ImageIcon mostraPrint() {
        ImageIcon imageIcon = new ImageIcon("/home/alunos/printscreen.png");
        Image image = imageIcon.getImage();
        Image image1 = image.getScaledInstance(200, 200, Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(image1);

        return imageIcon;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelInformacoes = new javax.swing.JPanel();
        labelNome = new javax.swing.JLabel();
        labelMac = new javax.swing.JLabel();
        labelIpv4 = new javax.swing.JLabel();
        labelIpv6 = new javax.swing.JLabel();
        labelNucleos = new javax.swing.JLabel();
        labelMemoriaTotal = new javax.swing.JLabel();
        labelMemoriaDisponivel = new javax.swing.JLabel();
        labelUltimoLogin = new javax.swing.JLabel();
        fieldMemoriaDisponivel = new javax.swing.JTextField();
        fieldMemoriaTotal = new javax.swing.JTextField();
        fieldNucleos = new javax.swing.JTextField();
        fieldIpv6 = new javax.swing.JTextField();
        fieldIpv4 = new javax.swing.JTextField();
        fieldMac = new javax.swing.JTextField();
        fieldNome = new javax.swing.JTextField();
        fieldLogin = new javax.swing.JTextField();
        panelProcessos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProcessos = new javax.swing.JTable();
        buttonParar = new javax.swing.JButton();
        panelTela = new javax.swing.JPanel();
        buttonCarregar = new javax.swing.JButton();
        labelPrint = new javax.swing.JLabel();

        labelNome.setText("Nome");

        labelMac.setText("MAC");

        labelIpv4.setText("IPv4");

        labelIpv6.setText("IPv6");

        labelNucleos.setText("Núcleos da CPU");

        labelMemoriaTotal.setText("Memória Total");

        labelMemoriaDisponivel.setText("Memória Disponível");

        labelUltimoLogin.setText("Último login");

        fieldMemoriaDisponivel.setEditable(false);

        fieldMemoriaTotal.setEditable(false);

        fieldNucleos.setEditable(false);

        fieldIpv6.setEditable(false);

        fieldIpv4.setEditable(false);

        fieldMac.setEditable(false);

        fieldNome.setEditable(false);

        fieldLogin.setEditable(false);

        javax.swing.GroupLayout panelInformacoesLayout = new javax.swing.GroupLayout(panelInformacoes);
        panelInformacoes.setLayout(panelInformacoesLayout);
        panelInformacoesLayout.setHorizontalGroup(
            panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMemoriaDisponivel)
                    .addComponent(labelNome, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelMac, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelIpv4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelIpv6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelNucleos, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelMemoriaTotal, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelUltimoLogin, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fieldNome)
                    .addComponent(fieldMac)
                    .addComponent(fieldIpv4)
                    .addComponent(fieldIpv6)
                    .addComponent(fieldNucleos)
                    .addComponent(fieldMemoriaTotal)
                    .addComponent(fieldMemoriaDisponivel)
                    .addComponent(fieldLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                .addContainerGap(227, Short.MAX_VALUE))
        );
        panelInformacoesLayout.setVerticalGroup(
            panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNome)
                    .addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMac)
                    .addComponent(fieldMac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelIpv4)
                    .addComponent(fieldIpv4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelIpv6)
                    .addComponent(fieldIpv6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNucleos)
                    .addComponent(fieldNucleos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMemoriaTotal)
                    .addComponent(fieldMemoriaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMemoriaDisponivel)
                    .addComponent(fieldMemoriaDisponivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUltimoLogin)
                    .addComponent(fieldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Informações", panelInformacoes);

        tableProcessos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "CMD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableProcessos);

        buttonParar.setText("Parar");
        buttonParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPararActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelProcessosLayout = new javax.swing.GroupLayout(panelProcessos);
        panelProcessos.setLayout(panelProcessosLayout);
        panelProcessosLayout.setHorizontalGroup(
            panelProcessosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProcessosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonParar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelProcessosLayout.setVerticalGroup(
            panelProcessosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProcessosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProcessosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProcessosLayout.createSequentialGroup()
                        .addComponent(buttonParar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Processos", panelProcessos);

        buttonCarregar.setText("Carregar");
        buttonCarregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCarregarActionPerformed(evt);
            }
        });

        labelPrint.setText("Clique ao lado para carregar a tela do aluno");

        javax.swing.GroupLayout panelTelaLayout = new javax.swing.GroupLayout(panelTela);
        panelTela.setLayout(panelTelaLayout);
        panelTelaLayout.setHorizontalGroup(
            panelTelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonCarregar)
                .addContainerGap())
        );
        panelTelaLayout.setVerticalGroup(
            panelTelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelTelaLayout.createSequentialGroup()
                        .addComponent(buttonCarregar)
                        .addGap(0, 376, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tela", panelTela);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPararActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) tableProcessos.getModel();
        int linhaSelecionada = tableProcessos.getSelectedRow();

        int pid = (Integer.parseInt(dtm.getValueAt(linhaSelecionada, 0).toString()));
        String cmd = String.valueOf(dtm.getValueAt(linhaSelecionada, 1));

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um processo primeiro", "Aviso", WARNING_MESSAGE);
        } else {
            InstrucaoJpaController instrucaoJpaController = new InstrucaoJpaController(emf);

            Instrucao instrucao = new Instrucao();
            instrucao.setEstacao(estacao);
            instrucao.setAck(0);

            switch (estacao.getSistemaOperacional()) {
                case "Linux":
                    instrucao.setComando("kill " + pid);
                    instrucaoJpaController.create(instrucao);
                    instrucao.setComando("pkill " + cmd);
                    instrucaoJpaController.create(instrucao);
                    break;
                case "Windows":
                    instrucao.setComando("taskkill " + pid);
                    instrucaoJpaController.create(instrucao);
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Sistema Operacional não reconhecido", "Erro", ERROR_MESSAGE);
                    break;
            }
        }
    }//GEN-LAST:event_buttonPararActionPerformed

    private void buttonCarregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCarregarActionPerformed
        InstrucaoJpaController instrucaoJpaController = new InstrucaoJpaController(emf);

        Instrucao instrucao = new Instrucao();
        instrucao.setEstacao(estacao);
        instrucao.setAck(0);
        instrucao.setComando("printscreen");
        instrucaoJpaController.create(instrucao);
        
        try {
            Socket s = new Socket(estacao.getNome(), 2016);
            InputStream is = s.getInputStream();
            OutputStream arquivoSaida = new FileOutputStream(new File("/home/alunos/imagem.png"));
            byte[] buffer = new byte[1024];
            int lidos;
            while ((lidos = is.read(buffer)) > 0) {
                arquivoSaida.write(buffer, 0, lidos);
            }
            arquivoSaida.close();
            is.close();
            s.close();
            mostraPrint();
        } catch (Exception e) {
            System.err.println("Erro: " + e);
        }
    }//GEN-LAST:event_buttonCarregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCarregar;
    private javax.swing.JButton buttonParar;
    private javax.swing.JTextField fieldIpv4;
    private javax.swing.JTextField fieldIpv6;
    private javax.swing.JTextField fieldLogin;
    private javax.swing.JTextField fieldMac;
    private javax.swing.JTextField fieldMemoriaDisponivel;
    private javax.swing.JTextField fieldMemoriaTotal;
    private javax.swing.JTextField fieldNome;
    private javax.swing.JTextField fieldNucleos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelIpv4;
    private javax.swing.JLabel labelIpv6;
    private javax.swing.JLabel labelMac;
    private javax.swing.JLabel labelMemoriaDisponivel;
    private javax.swing.JLabel labelMemoriaTotal;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelNucleos;
    private javax.swing.JLabel labelPrint;
    private javax.swing.JLabel labelUltimoLogin;
    private javax.swing.JPanel panelInformacoes;
    private javax.swing.JPanel panelProcessos;
    private javax.swing.JPanel panelTela;
    private javax.swing.JTable tableProcessos;
    // End of variables declaration//GEN-END:variables
}
