package view.servidor;

import controller.EstacaoJpaController;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.table.DefaultTableModel;
import model.Estacao;
import persistence.PersistenceSingleton;
import util.Tabela;

public class EnvioArquivo extends javax.swing.JPanel {

    DefaultTableModel dtm;

    public EnvioArquivo() {
        initComponents();

        EntityManagerFactory emf = PersistenceSingleton.getInstance().getEntityManagerFactory();
        EstacaoJpaController ejc = new EstacaoJpaController(emf);

        this.dtm = (DefaultTableModel) tableEstacoesDestino.getModel();

        List<Estacao> lista = ejc.findEstacaoEntities();

        Tabela.limparTabela(dtm);

        for (Estacao estacao : lista) {
            String nome, ip;
            long memoriaDisponivel;

            nome = estacao.getNome();
            ip = estacao.getIpv4();
            memoriaDisponivel = estacao.getMemoriaDisponivel();

            dtm.addRow(new Object[]{Boolean.FALSE, nome, ip, String.valueOf(memoriaDisponivel / 1000000) + " MB", ""});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableEstacoesDestino = new javax.swing.JTable();
        buttonMarcar = new javax.swing.JButton();
        buttonDesmarcar = new javax.swing.JButton();
        buttonSelecionar = new javax.swing.JButton();

        tableEstacoesDestino.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Nome", "IP", "Memória Disponível"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEstacoesDestino.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableEstacoesDestino);

        buttonMarcar.setText("Marcar todos");
        buttonMarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMarcarActionPerformed(evt);
            }
        });

        buttonDesmarcar.setText("Desmarcar todos");
        buttonDesmarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDesmarcarActionPerformed(evt);
            }
        });

        buttonSelecionar.setText("Selecionar arquivo");
        buttonSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelecionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonMarcar)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDesmarcar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSelecionar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSelecionar)
                    .addComponent(buttonMarcar)
                    .addComponent(buttonDesmarcar))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelecionarActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int retorno = chooser.showOpenDialog(this);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            
            try {
                ServerSocket ss = new ServerSocket(1234);
                Socket s = ss.accept();
                OutputStream os = s.getOutputStream();
                File arquivo = chooser.getSelectedFile();
                FileOutputStream fos = new FileOutputStream(arquivo);
                
                byte[] buffer  = new byte[1024];
                int bytesRead;
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Não foi possível enviar arquivo", "Erro", ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_buttonSelecionarActionPerformed

    private void buttonMarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMarcarActionPerformed
        for (int i = 0; i < dtm.getRowCount(); i++) {
            dtm.setValueAt(true, i, 0);
        }

    }//GEN-LAST:event_buttonMarcarActionPerformed

    private void buttonDesmarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDesmarcarActionPerformed
        for (int i = 0; i < dtm.getRowCount(); i++) {
            dtm.setValueAt(false, i, 0);
        }
    }//GEN-LAST:event_buttonDesmarcarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDesmarcar;
    private javax.swing.JButton buttonMarcar;
    private javax.swing.JButton buttonSelecionar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableEstacoesDestino;
    // End of variables declaration//GEN-END:variables
}
